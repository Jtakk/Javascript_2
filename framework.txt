{改善したい点}
(A) 最初に *,/,= を入力できないようにする。
(B) +,-,*,/ を連続で入力できないようにする。(連続で押した場合は最後に押したボタンで書き換えられるのが良い)
(C) =の直前に +,-,*,/ を入力した場合は計算結果に影響を与えないようにする。
(D) 先頭に0を入力した場合に、続けて数字を入力できないようにする。(ex. 012, 003)
(E) 先頭に小数点(.) を入力した場合、0. と入力されるようにする。
(F) 一つの数値内で小数点(.)が使えるのは一回限りとする。
(G) =入力後の結果を使用し、続けて計算できるようにする。 (ex. =の後に+を入力すると、結果+ と表示される)
(H) =入力後に数字を入力すると、計算結果がリセットされ、入力した数字のみ表示される。 (次の計算に移行する)


{方法}
フラグで状態を管理する。
使うフラグは、下記3つ。
1) 変数state      → 4つの入力状態を判別  (A),(B),(C),(G),(H) を解決
2) 変数mode       → 整数と小数を判別     (F)                 を解決
3) 変数banNumber  → 数値入力の可否を判別 (D)                 を解決

    (E) は別途実装



{方法詳細}

1) 変数state
  < start > 何も入力していない状態。= 初期状態
    ・ *,/,=を入力できない。
    ・ 小数点(.)を入力すると 0. が入力される。

  < numeric > 数字を入力した直後の状態。

  < arithmetic > 算術演算子を入力した直後の状態。
    ・ +,-,*,/ を連続で入力すると最後に入力した算術演算子で上書きされる。
    ・ 小数点(.)を入力すると 0. が入力される。
    ・ = を入力すると直前の算術演算子が無効となる。

  < finish > 等号を入力した直後の状態。
    ・ +,-,*,/ を入力すると、計算結果を利用して続けて計算できる。
    ・ 数字を入力すると、表示がリセットされて入力した数字が表示される。


2) 変数mode
  < integer > 整数入力中の状態。
    ・ 小数点(.)を入力できる。

  < float > 小数入力中の状態。
    ・ +,-,*,/,= が入力されるまでは小数点(.)を入力できない。



3) 変数banNumber
  < on > 数字入力が禁止されている状態。
    ・ 数字を入力できない。
  
  < off > 数字入力ができる状態。
    ・ 数字を入力できる。



(注)
state === "start"において *,/ は入力できないが、一度+や-を入力すると、*,/で上書きできてしまって計算不可となる点は解消できていない。
→ 算術演算子でも +,- と *,/ をしっかり区別する必要がある。